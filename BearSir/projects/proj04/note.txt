# Lisp 语法

Atomic Expressions

scm> 1
1
scm> 2.2
2.2
scm> '1
1
scm> '2.1
2.1
scm> True
 #t
scm> False
 #f
scm> true
 #t
scm> false
 #f
scm> #t
 #t
scm> #f
 #f

我的看法（正确性未知）：
阿拉伯数字, boolean值 的字符串本身与eval后一致
故前缀加 ' ` 输出形式一致

不加前缀 与内部特定标识符匹配一致，后输出

此两者 输出形式一样,代表类型不同


Symbols

scm> quotient ; A name bound to a built-in procedure
 #[quotient]  ;; 字符串eval得到 #[quotient] 过程
scm> 'quotient ; An expression that evaluates to a symbol
quotient ;; 加了前缀 不eval 直接输出字符串quotient
scm> 'hello-world!
hello-world!


Booleans

只有 False #f 的字符串输入 被解释为False


(cons 
    (cond 
        ((null? s) nil)
        ((null? (cdr s)) (cons (car s) nil))
        (   (> (car s) (cadr s))
            (cons (car s) nil)
        )
        (else (car s)
        )
    )
    (cond 
        ((null? (cdr s)) nil)
        (   (> (car s) (cadr s))
            (nondecreaselist (cdr s))
        )
        (else
              (nondecreaselist (cdr s))
        )
    )
 )


